"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["components_frame_XImgWorker_ts"],{14542:(e,t,r)=>{r.r(t),r.d(t,{default:()=>p});var n=r(49710),o=r(49512);let a=[];const i=new Map,c="memories-images";let l;!async function(){var e;try{l=await(null===(e=self.caches)||void 0===e?void 0:e.open(c))}catch(e){console.warn("Failed to open cache in worker")}}();const s=new n.A(c,{maxAgeSeconds:604800,maxEntries:2e4});let u,d;async function f(){if(u&&(self.clearTimeout(u),u=0),0===a.length)return;const e=a;a=[];const t=async(e,t,r)=>{var n;const o=t.clone();null!=r||(r=await t.blob()),null===(n=i.get(e))||void 0===n||n.forEach((e=>{var t;return null===(t=null==e?void 0:e.resolve)||void 0===t?void 0:t.call(e,r)})),i.delete(e),h(e,o)},r=async e=>{try{await t(e.origUrl,await g(e.origUrl))}catch(t){((e,t)=>{var r;null===(r=i.get(e))||void 0===r||r.forEach((e=>{var r;return null===(r=null==e?void 0:e.reject)||void 0===r?void 0:r.call(e,t)})),i.delete(e)})(e.origUrl,t)}};if(1===e.length)return void await r(e[0]);const n=e.map((e=>({fileid:e.fileid,x:Number(e.url.searchParams.get("x")),y:Number(e.url.searchParams.get("y")),a:e.url.searchParams.get("a"),reqid:e.reqid})));try{const r=await async function(e){return await fetch(d.multiUrl,{method:"POST",body:JSON.stringify({files:e}),headers:{"Content-Type":"application/json"}})}(n);if(200!==r.status||!r.body)throw new Error("Error fetching multi-preview");const o={"cache-control":"max-age=604800",expires:new Date(Date.now()+6048e5).toUTCString()},a=r.body.getReader();let i=new Uint8Array(524288),c=0,l=null,s=0;for(;;){const{value:r,done:n}=await a.read();if(n)break;for(s>i.length/3&&(i.set(i.slice(s)),c-=s,s=0);c+r.length>i.length;){const e=new Uint8Array(2*i.length);e.set(i),i=e,console.warn("Doubling multipreview buffer size",i.length)}for(i.set(r,c),c+=r.length;;){if(!l){if(c-s<1)break;const e=i[s],t=s+1;if(c-t<e)break;const r=i.slice(t,t+e),n=(new TextDecoder).decode(r);s=t+e,l=JSON.parse(n)}if(c-s<l.len)break;const r=new Blob([i.slice(s,s+l.len)],{type:l.type});s+=l.len;for(const n of e)if(n.reqid===l.reqid&&!n.done)try{const e=w(r,l.type,o);await t(n.origUrl,e,r),n.done=!0}catch(e){}l=null}}}catch(e){console.error("Multipreview error",e)}e.filter((e=>!e.done)).forEach(r)}function h(e,t){var r;try{if(null===(r=t.headers.get("cache-control"))||void 0===r?void 0:r.toLowerCase().includes("no-cache"))return;200===t.status&&(null==l||l.put(e,t.clone()),s.updateTimestamp(e.toString())),Math.random()<.01&&s.expireEntries()}catch(e){console.error("Error caching response",e)}}function w(e,t,r={}){return new Response(e,{status:200,headers:{"Content-Type":t||r["content-type"],"Content-Length":e.size.toString(),"Cache-Control":r["cache-control"],Expires:r.expires}})}async function g(e){const t=await fetch(e);if(200!==t.status||!t.body){const e=t.body?await t.text():"unknown";throw new Error(`Error fetching single preview: ${e}`)}return t}const p=(0,o.d)({fetchImageSrc:async function(e){return URL.createObjectURL(await async function(e){const t=await(null==l?void 0:l.match(e));if(t)return await t.blob();if(!/\/memories\/api\/image\/preview\/\d+(\?.*)?$/.test(e)){const t=await g(e);return h(e,t),await t.blob()}const r=new URL(e,self.location.origin),n=Number(r.pathname.split("/").pop());return await new Promise(((t,o)=>{var c;i.has(e)?null===(c=i.get(e))||void 0===c||c.push({resolve:t,reject:o}):(a.push({origUrl:e,url:r,fileid:n,reqid:Math.round(1e8*Math.random())}),i.set(e,[{resolve:t,reject:o}]),u||(u=self.setTimeout(f,20)),a.length>=20&&f())}))}(e))},configure:function(e){d=e}})}}]);
//# sourceMappingURL=memories-components_frame_XImgWorker_ts.js.map?v=929144e247a9aeaafe48